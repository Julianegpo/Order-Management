spring.application.name=service-auth
server.port=${PORT:0}

############# EUREKA CONFIG #############
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
eureka.instance.prefer-ip-address=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
#########################################

################# RESILIENCE4J #################
# configurar los parametros del CircuitBreaker
# orders es el ID que usamos en el controller OrdersREST para crear el circuito
# asignar un nombre a la configuracion
resilience4j.circuitbreaker.instances.users.base-config=default
# lanzamos 6 peticiones y cuando alcancemos el 50% de errores abrimos el circuito
resilience4j.circuitbreaker.configs.default.sliding-window-size=6
resilience4j.circuitbreaker.configs.default.failure-rate-threshold=50
# en estado abierto permaneceremos 20s antes de pasar a semiabierto
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=20s
# en semiabierto, lanzamos una muestra de 5 peticiones
# si superamos el 50% de fallos (3 peticiones) volvemos a abrir el circuito
# si no las superamos (2 peticiones como maximo) cerramos el circuito
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state=5
# configuramos las llamadas lentas
# cuando lanzo las 6 peticiones y el 50% tarda mas de 2s, abrimos circuito
resilience4j.circuitbreaker.configs.default.slow-call-duration-threshold=2s
resilience4j.circuitbreaker.configs.default.slow-call-rate-threshold=50
################################################

jwt.secret=mysecret
jwt.expiration=3600